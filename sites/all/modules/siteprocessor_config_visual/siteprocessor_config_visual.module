<?php

function siteprocessor_config_visual_block_info(){
  $blocks=array(
    'topblock' =>array(
      'info' => t('Top block'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'ownerblock' =>array(
      'info' => t('Owner block'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
  return $blocks;
}

function siteprocessor_config_visual_block_view($delta){
  $block=array();
  switch ($delta){
    case 'topblock':
      $block['subject'] ='';
      if ($image_fid = variable_get('siteprocessor_config_visual_top_image_fid', FALSE)) {
        $image = file_load($image_fid);
        $block['content']=l(theme('image_style',array('style_name'=>'toplogo_image','path'=>$image->uri)),'<front>',array('html'=>true));
      }
      else {
        $block['content']='';
      }
      break;
    case 'ownerblock':
      $block['subject'] ='';
      if ($image_fid = variable_get('siteprocessor_config_visual_owner_image_fid', FALSE)) {
        $image = file_load($image_fid);
        $block['content']=theme('image',array('path'=>$image->uri));
      }
      else {
        $block['content']='';
      }
      break;
  }
  return $block;
}



function siteprocessor_config_visual_images_form_submit($form, &$form_state) {
  if ($form_state['values']['siteprocessor_config_visual_top_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_top_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'top_image', 1);
    variable_set('siteprocessor_config_visual_top_image_fid', $file->fid);
    drupal_set_message(t('The top image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_top_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_top_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'top_image', 1);
      file_delete($file);
    }
    variable_set('siteprocessor_config_visual_top_image_fid', FALSE);
    drupal_set_message(t('The image @image_name was removed.', array('@image_name' => $file->filename)));
  }

  if ($form_state['values']['siteprocessor_config_visual_background_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_background_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'background_image', 1);
    variable_set('siteprocessor_config_visual_background_image_fid', $file->fid);
    drupal_set_message(t('The background image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_background_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_background_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'background_image', 1);
      file_delete($file);
    }
    variable_set('siteprocessor_config_visual_background_image_fid', FALSE);
    drupal_set_message(t('The background image @image_name was removed.', array('@image_name' => $file->filename)));
  }


  if ($form_state['values']['siteprocessor_config_visual_owner_image_fid'] != 0) {
    $file = file_load($form_state['values']['siteprocessor_config_visual_owner_image_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'siteprocessor_config_visual', 'owner_image', 1);
    variable_set('siteprocessor_config_visual_owner_image_fid', $file->fid);
    drupal_set_message(t('The background image @image_name was uploaded and saved with an ID of @fid', array('@image_name' => $file->filename, '@fid' => $file->fid)));
  }
  elseif ($form_state['values']['siteprocessor_config_visual_owner_image_fid'] == 0) {
    $fid = variable_get('siteprocessor_config_visual_owner_image_fid', FALSE);
    $file = $fid ? file_load($fid) : FALSE;
    if ($file) {
      file_usage_delete($file, 'siteprocessor_config_visual', 'owner_image', 1);
      file_delete($file);
    }
    variable_set('siteprocessor_config_visual_owner_image_fid', FALSE);
    drupal_set_message(t('The owner image @image_name was removed.', array('@image_name' => $file->filename)));
  }


}

function siteprocessor_config_visual_permission() {
  return array(
    'administer siteprocessor colors'=>array(
      'title'=>t('administer siteprocessor colors'),
      'description'=>t('administer siteprocessor colors'),
    ),
    'administer site processor images'=>array(
      'title'=>t('administer site processor images'),
      'description'=>t('administer site processor images'),
    ),
    'administer site processor custom css'=>array(
      'title'=>t('administer site processor custom css'),
      'description'=>t('administer site processor custom css'),
    ),
  );
}

function siteprocessor_config_visual_menu() {
  $items['admin/config/siteprocessor/colors'] = array(
    'title' => 'Colors',
    'description' => 'Adjust colors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_colors_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer siteprocessor colors'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/siteprocessor/images'] = array(
    'title' => 'Images',
    'description' => 'Images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_images_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site processor images'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/config/siteprocessor/custom_css'] = array(
    'title' => 'Custom CSS',
    'description' => 'Custom CSS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteprocessor_config_visual_custom_css_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site processor custom css'),
    'file' => 'siteprocessor_config_visual.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


function siteprocessor_config_visual_init(){
  siteprocessor_config_visual_color_set_css();

  if ($image_fid = variable_get('siteprocessor_config_visual_background_image_fid', FALSE)) {
    $image = file_load($image_fid);
    $image_url=file_create_url($image->uri);
    drupal_add_css("
      body{
        background-image:url($image_url);
        background-position:top center;
        background-repeat:no-repeat;
      }
    ",'inline');
  }

  if($custom_css=variable_get('siteprocessor_config_visual_custom_css',false)){
    drupal_add_css($custom_css,array('type'=>'inline','group'=>CSS_THEME,'every_page'=>true,'weight'=>6000));
  }



}

function siteprocessor_config_visual_colors_form_submit($form, &$form_state) {
  $color_keys=siteprocessor_config_visual_colors_get(array('keys_list'=>true));
  $color_list=array();
  foreach($color_keys as $key){
    if(isset($form_state['values'][$key])) {
      $color_list[$key]=$form_state['values'][$key];
    }
  }
  siteprocessor_config_visual_colors_set($color_list);
  drupal_set_message(t('Colors have been saved'), 'status');
}

//From http://www.php.net/manual/en/function.array-merge-recursive.php
function MergeArrays($Arr1, $Arr2)
{
  foreach($Arr2 as $key => $Value)
  {
    if(array_key_exists($key, $Arr1) && is_array($Value))
      $Arr1[$key] = MergeArrays($Arr1[$key], $Arr2[$key]);
    else
      $Arr1[$key] = $Value;
  }
  return $Arr1;
}


function siteprocessor_config_visual_color_set_css(){
  //FIXME: cache from here (with theme as key)

  global $theme_key;
  $info_arr=siteprocessor_config_visual_parse_theme_info($theme_key);
  //skip if not supported by active theme
  if(!isset($info_arr['siteprocessor']['colors'])) return array();

  $colors=siteprocessor_config_visual_colors_get(array('keys_values_list'=>true));

  $css2add='';
  foreach($info_arr['siteprocessor']['color_css'] as $theme=>$files){
    foreach($files as $file){
      $filename=drupal_get_path('theme',$theme).'/'.$file;
      if(file_exists($filename)) {
        $file_content=file_get_contents($filename);
        foreach($colors as $key=>$color){
          $file_content=str_replace("[[$key]]","#$color",$file_content);
        }
        $file_content=preg_replace('/(\[\[[A-Za-z0-9_-]+\]\])/','magenta',$file_content);
        $css2add.=$file_content;

      }
    }
  }
  //to here
  drupal_add_css($css2add,array('type'=>'inline','group'=>CSS_THEME,'every_page'=>true,'weight'=>5000));
}


function siteprocessor_config_visual_parse_theme_info($theme){
  $infofile=drupal_get_path('theme', $theme).'/'.$theme.'.info';
  $file_arr=drupal_parse_info_file($infofile);
  //check for basetheme
  if(isset($file_arr['base theme'])){
    $base_arr=siteprocessor_config_visual_parse_theme_info($file_arr['base theme']);
    //merge from basetheme info
    $file_arr=MergeArrays($base_arr,$file_arr);
  }

  //FIXME: register order of inherited themes
  $file_arr['siteprocessor']['theme_order'][]=$theme;
  return $file_arr;
}


function siteprocessor_config_visual_color_groups_get(){
  $theme=variable_get('theme_default','kaykay');
  $info_arr=siteprocessor_config_visual_parse_theme_info($theme);
  $color_groups=$info_arr['siteprocessor']['color_groups'];
  return $color_groups;

}

function siteprocessor_config_visual_colors_get($args=null){
  $theme=variable_get('theme_default','kaykay');
  $info_arr=siteprocessor_config_visual_parse_theme_info($theme);;
  //skip if not supported by active theme
  if(!isset($info_arr['siteprocessor']['colors'])) return array();
  $colors=$info_arr['siteprocessor']['colors'];

  //returns list of keys
  if($args){
    if(isset($args['keys_list'])){
      $keys=array();
      foreach($colors as $group){
        foreach($group as $key=>$item){
          $keys[]=$key;
        }
      }
      return $keys;
    }
  }

  //getting customized colors
  $colors_var=variable_get('siteprocessor_config_visual_colors', array());
  foreach($colors as $gkey=>$group){
    foreach($group as $key=>$item){
      if(isset($colors_var[$key])){
        $colors[$gkey][$key]['value']=$colors_var[$key];
      }
    }
  }

  //returns list of keys and values
  if($args){
    if(isset($args['keys_values_list'])){
      $list=array();
      foreach($colors as $group){
        foreach($group as $key=>$item){
          $list[$key]=$item['value'];
        }
      }
      return $list;
    }
  }

  //returns entire structure
  return $colors;
}

function siteprocessor_config_visual_colors_set($color_list){
  variable_set('siteprocessor_config_visual_colors',$color_list);
}
